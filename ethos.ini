*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
*  CLASS input parameter file  *
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*

> This example of input file, intended for CLASS beginners, lists all
> possibilities with detailed comments.  You can use a more concise version, in
> which only the arguments in which you are interested would appear.  Only
> lines containing an equal sign not preceded by a sharp sign "#" are
> considered by the code. Hence, do not write an equal sign within a comment,
> the whole line would be interpreted as relevant input. Input files must have
> an extension ".ini".

----------------------------
----> background parameters:
----------------------------

1) Hubble parameter : either 'H0' in km/s/Mpc or 'h' or '100*theta_s' where the
   latter is the peak scale parameter 100(ds_dec/da_dec) close to 1.042143
   (default: 'h' set to 0.67556)

#H0 = 67.556
h =0.67
#100*theta_s = 1.042143

2) photon density: either 'T_cmb' in K or 'Omega_g' or 'omega_g' (default:
   'T_cmb' set to 2.7255)

T_cmb = 2.7255
#Omega_g =
#omega_g =

3) baryon density: either 'Omega_b' or 'omega_b' (default: 'omega_b' set to
   0.022032)

#Omega_b =
omega_b = 0.02214

4a) ultra-relativistic species / massless neutrino density: either 'N_ur' or
   'Omega_ur' or 'omega_ur' (default: 'N_ur' set to 3.046) (note: instead of
   'N_ur' you can pass equivalently 'N_eff', although this syntax is
   deprecated) (one more remark: if you have respectively 1,2,3 massive neutrinos, if you stick to the default value T_ncdm equal to 0.71611, designed to give m/omega of 93.14 eV, and if you want to use N_ur to get N_eff equal to 3.046 in the early universe, then you should pass here respectively 2.0328,1.0196,0.00641)

N_ur = 3.046
#Omega_ur =
#omega_ur =

4b) to simulate ultra-relativistic species with non-standard
    properties, you can pass 'ceff2_ur' and 'cvis2_ur' (effective squared
    sound speed and viscosity parameter, like in the Generalised Dark
    Matter formalism of W. Hu) (default: both set to 1/3)

#ceff2_ur =
#cvis2_ur =

5) density of cdm (cold dark matter): 'Omega_cdm' or 'omega_cdm' (default:
   'omega_cdm' set to 0.12038)

#Omega_cdm =
omega_cdm = 0.1207

#########
# ETHOS #
#########
ETHOS.a) All parameters related to the interacting dark matter

#fraction of CDM that we want to be interacting f_idm_dr=0 indicates 100% CDM, f_idm_dr=1 indicates 100% IDM (default = 0)
f_idm_dr = 1.0
#m_dm is the dark matter mass in eV (default = 1.0e11)
m_dm = 1.0e11

ETHOS.b) All parameters related to the interacing dark radiation

#xi_idr is the interaction rate, standard xi_dark=(T_dark/T_cmb) (default = 0)
xi_idr = 0.5
#0.7137658555036082
#stat_f_idr is the statistical factor, stat_f_idr=7/8=0.875 if fermionic dark radiation, stat_f_idr=1 if bosonic dark radiation (default = 0.875)
stat_f_idr = 0.875

ETHOS.c) All parameters related to the IDM-IDR interaction

#a_dark is the strength of the coupling between DM and DR (default = 0)
a_dark = 3.0e10
#b_dark is the coefficient for dark radiation self interactions (default = 0)
b_dark = 0.0
# nindex_dark is the power of the temperature dependence of the co-moving interaction rate (default = 0)
nindex_dark = 4.0
#idr_nature=free_streaming, or fluid (default = free_streaming)
idr_nature = free_streaming
#l_max_idr is the max momentum in Boltzmann hierarchy (at least 3, default = 17)
l_max_idr = 17
#alpha_dark is the dark radiation dark matter interaction angular coefficient, =3/4=0.75 if vector boson mediator; 3/2=1.5 if scalar boson mediator (default = 1.5)
alpha_dark = 1.5
#dark radiation self interaction angular coefficient (default = 1.5)
beta_dark = 1.5

#wavenumbers per decade sampled for the matter power spectrum (default = 10, recommended for ethos = 100)
k_per_decade_for_pk_idmdr = 100.
#Dark radiation streaming approximation  switch for dark radiation: 0 = without approx, 1 = with approx (default = 0)
dark_radiation_streaming_approximation = 0
#RSA dark radiation triggers(set to 5000/1000 when computing mPk,mTk)
dark_radiation_streaming_trigger_tau_over_tau_k =
dark_radiation_streaming_trigger_tau_c_over_tau =

################
# END OF ETHOS #
################

6) all parameters describing the ncdm sector (i.e. any non-cold dark matter
   relics, including massive neutrinos, warm dark matter, etc.):

  -> 'N_ncdm' is the number of distinct species (default: set to 0)

N_ncdm = 0

  -> 'use_ncdm_psd_files' is the list of N_ncdm numbers: 0 means 'phase-space
     distribution (psd) passed analytically inside the code, in the mnodule
     background.c, inside the function background_ncdm_distribution()'; 1 means
     'psd passed as a file with at list two columns: first for q, second for
     f_0(q)', where q is p/T_ncdm (default: only zeros)

#use_ncdm_psd_files = 0

  -> if some of the previous values are equal to one, 'ncdm_psd_filenames' is
     the list of names of psd files (as many as number of ones in previous entry)

ncdm_psd_filenames = psd_FD_single.dat

  -> 'ncdm_psd_parameters' is an optional list of double parameters to describe
     the analytic distribution function or to modify a p.s.d. passed as a file.
     It is made available in the routine background_ncdm_distribution.

#ncdm_psd_parameters = Nactive, sin^2_12 ,s23 ,s13
ncdm_psd_parameters = 0.3 ,0.5, 0.05


The remaining parameters should be entered as a list of N_ncdm numbers
separated by commas:

  -> 'Omega_ncdm' or 'omega_ncdm' or 'm_ncdm' in eV (default: all set to zero);
           with only one of these inputs, CLASS computes the correct value of
           the mass; if both (Omega_ncdm, m_ncdm) or (omega_ncdm, m_ncdm) are
           passed, CLASS will renormalise the psd in order to fulfill both
           conditions.
           Passing zero in the list of m_ncdm's or Omeg_ncdm's means that for
           this component, this coefficient is not imposed, and its value is
           inferred from the other one.

m_ncdm = 0.04, 0.04, 0.04
Omega_ncdm =

  -> 'T_ncdm' is the ncdm temperature in units of photon temperature
     (default: set to 0.71611, which is slightly larger than the
     instantaneous decoupling value (4/11)^(1/3); indeed, this default
     value is fudged to give a ratio m/omega equal to 93.14 eV for
     active neutrinos, as predicted by precise studies of active
     neutrino decoupling, see hep-ph/0506164)

T_ncdm =

  -> 'ksi_ncdm' is the ncdm chemical potential in units of its own temperature
     (default: set to 0)

ksi_ncdm =

  -> 'deg_ncdm' is the degeneracy parameter multiplying the psd: 1 stands for
     'one family', i.e. one particle + anti-particle (default: set to 1.0)

deg_ncdm =

7) curvature: 'Omega_k' (default: 'Omega_k' set to 0)

Omega_k = 0.

8a) Dark energy contributions. At least one out of three conditions must be satisfied:
    i)   'Omega_Lambda' unspecified.
    ii)  'Omega_fld' unspecified.
    iii) 'Omega_scf' set to a negative value. [Will be refered to as
         unspecified in the following text.]
    The code will then use the first unspecified component to satisfy the
    closure equation (sum_i Omega_i) equals (1 + Omega_k)
    (default: 'Omega_fld' and 'Omega_scf' set to 0 and 'Omega_Lambda' inferred
    by code)

# Omega_Lambda = 0.7
Omega_fld = 0
Omega_scf = 0

8b) equation of state parameter (p/rho equal to w0+wa(1-a/a0) ) and sound speed
    of the fluid (this is the sound speed defined in the frame comoving with
    the fluid, i.e. obeying to the most sensible physical definition)

w0_fld = -1.0
wa_fld = 0.
cs2_fld = 1

--------------------------------
----> thermodynamics parameters:
--------------------------------

1) primordial Helium fraction 'YHe', e.g. 0.25; if set to 'BBN' or 'bbn', will
   be inferred from Big Bang Nucleosynthesis (default: set to 'BBN')

YHe = 0.24
#BBN
#ethos class has a bbn issue

2) 'recombination' algorithm set to 'RECFAST' or 'HyRec'

recombination = RECFAST

2) parametrization of reionization: 'reio_parametrization' must be one
   of 'reio_none' (no reionization), 'reio_camb' (like CAMB: one
   tanh() step for hydrogen reionization one for second helium
   reionization), 'reio_bins_tanh' (binned history x_e(z) with tanh()
   interpolation between input values), 'reio_half_tanh' (like
   'reio_camb' excepted that we match the function xe(z) from
   recombination with only half a tanh(z-z_reio)), 'reio_many_tanh'
   (arbitrary number of tanh-like steps with specified central values,
   a scheme usually more useful than 'reio_bins_tanh')...  (default:
   set to 'reio_camb')

reio_parametrization = reio_camb

3.a.) if 'reio_parametrization' set to 'reio_camb' or 'reio_half_tanh': enter
      one of 'z_reio' or 'tau_reio' (default: 'z_reio' set to 11.357 to get tau_reio of 0.0925), plus
      'reionization_exponent', 'reionization_width',
      'helium_fullreio_redshift', 'helium_fullreio_width'
      (default: set to 1.5, 0.5, 3.5, 0.5)

#z_reio = 11.357
tau_reio = 0.0581

reionization_exponent = 1.5
reionization_width = 0.5
helium_fullreio_redshift = 3.5
helium_fullreio_width = 0.5

----------------------------------------------------
----> define which perturbations should be computed:
----------------------------------------------------

1.a) list of output spectra requested:
- 'tCl' for temperature Cls,
- 'pCl' for polarization Cls,
- 'lCl' for CMB lensing potential Cls,
- 'nCl' (or 'dCl') for density number count Cls,
- 'sCl' for galaxy lensing potential Cls,
- 'mPk' for total matter power spectrum P(k) infered from gravitational potential,
- 'dTk' (or 'mTk') for density transfer functions for each species,
- 'vTk' for velocity transfer function for each species.
By defaut, the code will try to compute the following cross-correlation Cls (if
available): temperature-polarisation, temperature-CMB lensing, polarization-CMB
lensing, and density-lensing. Other cross-correlations are not computed because
they would slow down the code considerably.

Can be left blank if you do not want to evolve cosmological perturbations at
all. (default: set to blanck, no perturbation calculation)

output = tCl,pCl,lCl,mTk,mPk
#output = mTk,mPk
#carefull lensing = no

1.b) if you included 'tCl' in the list, you can take into account only some of
     the terms contributing to the temperature spectrum: intrinsic temperature
     corrected by Sachs-Wolfe ('tsw' or 'TSW'), early integrated Sachs-Wolfe
     ('eisw' or 'EISW'), late integrated Sachs-Wolfe ('lisw' or 'LISW'),
     Doppler ('dop' or 'Dop'), polarisation contribution ('pol' or 'Pol'). Put
     below the list of terms to be included
     (defaut: if this field is not passed, all terms will be included)

#temperature contributions = tsw, eisw, lisw, dop, pol

1.c) if one of 'eisw' or 'lisw' is turned off, the code will read 'early/late
     isw redshift', the split value of redshift z at which the isw is
     considered as late or early (if this field is absent or left blank, by
     default, 'early/late isw redshift' is set to 50)

#early/late isw redshift =

1.d) if you included 'nCl' (or 'dCl') in the list, you can take into account
     only some of the terms contributing to the obsevable number count
     fluctuation spectrum: matter density ('density'), redshift-space and
     Doppler distortions ('rsd'), lensing ('lensing'), or gravitational
     potential terms ('gr'). Put below the list of terms to be included
     (defaut: if this field is not passed, only 'dens' will be included)

#number count contributions = density, rsd, lensing, gr

2) if you want an estimate of the non-linear P(k) and Cls, enter 'halofit' or
   'Halofit' or 'HALOFIT' for Halofit; otherwise leave blank
   (default: blank, linear P(k) and Cls)

non linear =

4) list of modes ('s' for scalars, 'v' for vectors, 't' for tensors). More than
   one letter allowed, can be attached or separated by arbitrary characters;
   letters can be small or capital.
   (default: set to 's')

modes = s
#modes = s,t

5) relevant only if you ask for 'tCl, lCl' and/or 'pCl, lCl': if you want the
   spectrum of lensed Cls, enter a word containing the letter 'y' or 'Y'
   (default: no lensed Cls)

lensing = yes

7) list of initial conditions for scalars ('ad' for adiabatic, 'bi' for baryon
   isocurvature, 'cdi' for CDM isocurvature, 'nid' for neutrino density
   isocurvature, 'niv' for neutrino velocity isocurvature). More than one of
   these allowed, can be attached or separated by arbitrary characters; letters
   can be small or capital.
   (default: set to 'ad')

ic = ad
#ic = ad&bi&nid

8) gauge in which calculations are performed: 'sync' or 'synchronous' or
   'Synchronous' for synchronous, 'new' or 'newtonian' or 'Newtonian' for
   Newtonian/longitudinal gauge
   (default: set to synchronous)

gauge = new

---------------------------------------------
----> define primordial perturbation spectra:
---------------------------------------------

1) primordial spectrum type ('analytic_Pk' for an analytic smooth function with amplitude, tilt, running, etc.; analytic spectra with feature can also be added as a new type;'inflation_V' for a numerical computation of the inflationary primordial spectrum, through a full integration of the perturbation equations, given a parametrization of the potential V(phi) in the observable window, like in astro-ph/0703625; 'inflation_H' for the same, but given a parametrization of the potential H(phi) in the observable window, like in astro-ph/0710.1630; 'inflation_V_end' for the same, but given a parametrization of the potential V(phi) in the whole region between the observable part and the end of inflation; there is also an option 'two scales' in order to specify two amplitudes instead of one amplitude and one tilt, like in the isocurvature mode analysis of the Planck inflation paper (works also for adiabatic mode only; see details below, item 2.c); finally 'external_Pk' allows for the primordial spectrum to be computed externally by some piece of code, or to be read from a table, see 2.d). (default: set to 'analytic_Pk')

P_k_ini type = analytic_Pk

2) parameters related to one of the primordial spectrum types (will only be
   read if they correspond to the type selected above)

2.a) for type 'analytic_Pk':

2.a.1) pivot scale in Mpc-1 (default: set to 0.05)

k_pivot = 0.05

2.a.2) scalar adiabatic perturbations: curvature power spectrum value at pivot scale ('A_s' or 'ln10^{10}A_s'), tilt at the same scale 'n_s', and tilt running 'alpha_s' (default: set 'A_s' to 2.215e-9, 'n_s' to 0.9619, 'alpha_s' to 0)

A_s = 2.12e-9
#ln10^{10}A_s = 3.0980
n_s = 0.9624
alpha_s = 0.

-------------------------------------
----> define format of final spectra:
-------------------------------------

1) maximum l for CLs:
- 'l_max_scalars' for CMB scalars (temperature, polarization, cmb lensing potential),
- 'l_max_tensors' for CMB tensors (temperature, polarization)
- 'l_max_lss'     for Large Scale Structure Cls (density, galaxy lensing potential)
Reducing 'l_max_lss' with respect to l_max_scalars reduces the execution time significantly
(default: set 'l_max_scalars' to 2500, 'l_max_tensors' to 500, 'l_max_lss' to 300)

l_max_scalars = 2500
l_max_tensors = 500
#l_max_lss = 600

2) maximum k in P(k), 'P_k_max_h/Mpc' in units of h/Mpc or 'P_k_max_1/Mpc' in
   units of 1/Mpc. If scalar Cls are also requested, a minimum value is
   automatically imposed (the same as in scalar Cls computation)
   (default: set to 0.1h/Mpc)

P_k_max_h/Mpc = 10.
#P_k_max_1/Mpc = 0.7

3) value(s) 'z_pk' of redshift(s) for P(k,z) output file(s); can be ordered
   arbitrarily, but must be separated by comas (default: set 'z_pk' to 0)

z_pk = 0
#z_pk = 0., 2., 5.

4) if the code is interfaced with routines that need to interpolate P(k,z) at
   various values of (k,z), enter 'z_max_pk', the maximum value of z at which
   such interpolations are needed. (default: set to maximum value in above
   'z_pk' input)

z_max_pk =
#1.e+8

6) parameters for the the matter density number count (option 'nCl' (or 'dCl'))
   or galaxy lensing potential (option 'sCl') Cls:

6a) enter here a description of the selection functions W(z) of each
    redshift bin; selection can be set to 'gaussian', 'tophat' or
    'dirac', then pass a list of N mean redshifts in growing order
    separated by comas, 1 or N widths separated by comas, 1 or N bias
    separated by a comma, and 1 or N magnification bias separated by a
    comma. The width stands for one standard deviation of the gaussian
    (in z space), or for the half-width of the top-hat. Finally,
    non_diagonal sets the number of cross-correlation spectra that you
    want to calculate: 0 means only auto-correlation, 1 means only
    adjacent bins, and number of bins minus one means all correlations
    (default: set to 'gaussian',1,0.1,1.,0.,0)

selection=gaussian
selection_mean = 0.98,0.99,1.0,1.1,1.2
selection_width = 0.1
selection_bias =
selection_magnification_bias =
non_diagonal=4

    [note: for good performances, the code uses the Limber approximation for nCl. If you want high precision even with thin selection functions, increase the default value of the precision parameters l_switch_limber_for_nc_local_over_z, l_switch_limber_for_nc_los_over_z; for instance, add them to the input file with values 10000 and 2000, instead of the default 100 and 30]

6b) It is possible to multiply the window function W(z) by a selection function
    'dNdz' (number of objects per redshift interval). Type the name of the file
    containing the redshift in the first column and the number of objects in
    the second column (do not call it 'analytic*'). Set to 'analytic' to use
    instead the analytic expression from arXiv:1004.4640 (this function can be
    tuned in the module transfer.c, in the subroutine transfer_dNdz_analytic).
    Leave blank to use a uniform distribution (default).

dNdz_selection =

6c) It is possible to consider source number counts evolution. Type the name of
    the file containing the redshift on the first column and the number of
    objects on the second column (do not call it 'analytic*'). Set to
    'analytic' to use instead the analytic expression from Eq. 48 of
    arXiv:1105.5292. Leave blank to use constant comoving number densities
    (default).

dNdz_evolution =

7a) file name root 'root' for all output files (if Cl requested, written to
    '<root>cl.dat'; if P(k) requested, written to '<root>pk.dat'; plus similar
    files for scalars, tensors, pairs of initial conditions, etc.; if file with
    input parameters requested, written to '<root>parameters.ini') (default:
    the input module sets automatically 'root' to 'output/<thisfilename>N_',
    where N is the first available integer number, starting from 00, to avoid
    erasing the output of previous runs)

##root = output/nuint0.1_

7b) do you want headers at the beginning of each output file (giving precisions
    on the output units/ format) ? If 'headers' set to something containing the
    letter 'y' or 'Y', headers written, otherwise not written
    (default: written)

headers = yes

7c) in all output files, do you want columns to be normalized and ordered with
    the default CLASS definitions or with the CAMB definitions (often idential
    to the CMBFAST one) ? Set 'format' to either 'class', 'CLASS', 'camb' or
    'CAMB' (default: 'class')

format = class

7d) Do you want to write a table of background quantitites in a file? This will
    include H, densities, Omegas, various cosmological distances, sound
    horizon, etc., as a function of conformal time, proper time, scale factor.
    File created if 'write background'  set to something containing the letter
    'y' or 'Y', file written, otherwise not written (default: not written)

write background = yes

7e) Do you want to write a table of thermodynamics quantitites in a file? File
    is created if 'write thermodynamics' is set to something containing the
    letter 'y' or 'Y'. (default: not written)

write thermodynamics = yes

7f) Do you want to write a table of perturbations to files for certain
    wavenumbers k? Dimension of k is 1/Mpc. The actual wave numbers are chosen
    such that they are as close as possible to the requested k-values.

#k_output_values = 10

7g) Do you want to write the primordial scalar(/tensor) spectrum in a file,
    with columns k [1/Mpc], P_s(k) [dimensionless], ( P_t(k) [dimensionless])?
    File created if 'write primordial'  set to something containing the letter
    'y' or 'Y', file written, otherwise not written (default: not written)

write primordial = no

7h) Do you want to have all input/precision parameters which have been read
    written in file '<root>parameters.ini', and those not written in file
    '<root>unused_parameters' ? If 'write parameters' set to something
    containing the letter 'y' or 'Y', file written, otherwise not written
    (default: not written)

write parameters = yeap

7i) Do you want a warning written in the standard output when an input
    parameter or value could not be interpreted ? If 'write warnings' set to
    something containing the letter 'y' or 'Y', warnings written, otherwise not
    written (default: not written)

write warnings =

----------------------------------------------------
----> amount of information sent to standard output:
----------------------------------------------------

Increase integer values to make each module more talkative (default: all set to 0)

input_verbose = 1
background_verbose = 1
thermodynamics_verbose = 1
perturbations_verbose = 1
transfer_verbose = 1
primordial_verbose = 1
spectra_verbose = 1
nonlinear_verbose = 1
lensing_verbose = 1
output_verbose = 1
